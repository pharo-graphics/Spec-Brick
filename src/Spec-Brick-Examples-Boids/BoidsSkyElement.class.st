"
I'm a representation of a BoidsSimulation in Bloc.

Please refer to that class for more information.

My subclasses define alternative implementations to draw the boids in Bloc.

"
Class {
	#name : #BoidsSkyElement,
	#superclass : #BlElement,
	#instVars : [
		'steppingAnimation',
		'simulation'
	],
	#category : #'Spec-Brick-Examples-Boids-UI-Bloc'
}

{ #category : #initialization }
BoidsSkyElement >> boidWasAddedToSimulation: aBoid [
	"Hook to act after a new boid was added to the simulation"

	self subclassResponsibility

]

{ #category : #accessing }
BoidsSkyElement >> ensureNotStepping [
	
	steppingAnimation ifNotNil: [
		steppingAnimation stop.
		steppingAnimation := nil ]
]

{ #category : #accessing }
BoidsSkyElement >> ensureStepping [

	steppingAnimation ifNil: [
		steppingAnimation := self newSteppingAnimation.
		self addAnimation: steppingAnimation ]

]

{ #category : #initialization }
BoidsSkyElement >> initialize [

	super initialize.
	self 
		background: Color lightGray;
		  constraintsDo: [ :c | 
			  c horizontal matchParent.
			  c vertical matchParent ];
		subscribeClickToAddBoid;
		subscribeExtentChangeToResizeSimulation "--> This is key because 
			simulation is initialized on first resize."

]

{ #category : #initialization }
BoidsSkyElement >> initializeSimulation [
	"Initialize the simulation and start stepping. This requires that my area is not zero."

	simulation := BoidsSimulation exampleWithSomeBoidsExtent: self size asIntegerPoint.

	simulation boids do: [ :each |
		self boidWasAddedToSimulation: each ].
	
	self ensureStepping.

]

{ #category : #testing }
BoidsSkyElement >> isSteppingAnimation [

	^ steppingAnimation isNotNil
]

{ #category : #initialization }
BoidsSkyElement >> newSteppingAnimation [

	^ BlNumberTransition new
		  from: 0;
		  to: 1;
		  onStepDo: [ :t | self step ];
		  beInfinite;
		  yourself
]

{ #category : #accessing }
BoidsSkyElement >> simulation [

	^ simulation
]

{ #category : #accessing }
BoidsSkyElement >> step [

	simulation move.
	self invalidate.
]

{ #category : #initialization }
BoidsSkyElement >> subscribeClickToAddBoid [

	self
		addEventHandlerOn: BlClickEvent
		do: [ :anEvent |
			| aBoid |
			aBoid := Boid newIn: simulation random: SharedRandom globalGenerator.
			aBoid position: anEvent localPosition.
			simulation addBoid: aBoid.
			self boidWasAddedToSimulation: aBoid ]

]

{ #category : #initialization }
BoidsSkyElement >> subscribeExtentChangeToResizeSimulation [

	self
		addEventHandlerOn: BlElementExtentChangedEvent
		do: [ :anEvent |
			"The first time this event occurs, it just initializes the boids.
			The next times, the simulation extent must be updated."
			simulation
				ifNil: [ self initializeSimulation ]
				ifNotNil: [ 
					self size asIntegerPoint traceCr.
					simulation extent: self size asIntegerPoint ] ]
]
